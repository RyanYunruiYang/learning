/*
Exercise 9.28: Write a function that takes a forward_list<string> and two 
additional string arguments. The function should find the first string and 
insert the second immediately following the first. If the first string is not 
found, then insert the second string at the end of the list.
*/
#include <forward_list>
#include <string>
#include <iostream>
using std::forward_list; 
using std::string;

void insert_special(forward_list<string>& fls, string target, string posttarget) {
    auto prev = fls.before_begin();
    auto curr = fls.begin();

    while (curr != fls.end()) {
        if (*curr == target) {
            fls.insert_after(curr, posttarget);
            return;
        }
        prev = curr;
        ++curr;
    }
    fls.insert_after(prev, posttarget);
    return;
}

/*
Test Cases generated by GPT.
*/
int main() {
    forward_list<string> fls = {"this", "is", "a", "test"};
    
    // Test case 1: target is in the list
    insert_special(fls, "is", "not");

    // Expected output: "this", "is", "not", "a", "test"
    for (const auto& str : fls) {
        std::cout << str << " ";
    }
    std::cout << std::endl;

    // Test case 2: target is not in the list
    forward_list<string> fls2 = {"one", "two", "three"};
    insert_special(fls2, "four", "five");

    // Expected output: "one", "two", "three", "five"
    for (const auto& str : fls2) {
        std::cout << str << " ";
    }
    std::cout << std::endl;

    return 0;
}